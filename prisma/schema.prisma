// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  hash      String
  firstName String?
  lastName  String?
  wishlist  String[] // Array of strings to represent an unordered set

  bankRecommendations BankRecommendation[]

  @@map("users")
}

model BankRecommendation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])

  // Input parameters
  digitalInterfaceRank       Int
  numberOfBranches           Int
  greenInitiativesRank       Int
  feeLevelRank               Int
  internationalSupportRank   Int
  interestRateRangeRank      Int
  customerServiceQualityRank Int
  capitalAdequacyRank        Int

  // Banking services (boolean flags)
  autoLoans       Boolean
  creditCards     Boolean
  globalBanking   Boolean
  investments     Boolean
  loans           Boolean
  mortgages       Boolean
  savingsAccounts Boolean

  // Customer segments (boolean flags)
  globalCustomers Boolean
  professionals   Boolean
  smes            Boolean
  seniors         Boolean
  students        Boolean
  techSavvy       Boolean

  // Output result
  recommendedBank String

  @@map("bank_recommendations")
}
