name: FinCrack Backend CD

on:
  workflow_run:
    workflows: ['FinCrack Backend CI']
    types:
      - completed
    branches:
      - main
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy'
        required: true
        default: 'latest'

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Create app directory if not exists
            mkdir -p ~/fincrack-backend

            # Navigate to app directory
            cd ~/fincrack-backend

            # Create or update .env file for production
            cat > .env << EOL
            # Environment variables for Prisma
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}

            # Environment
            NODE_ENV=production

            # Bank recommendation API URLs
            BANK_RECOMMENDATION_DEV_URL=${{ secrets.BANK_RECOMMENDATION_DEV_URL }}
            BANK_RECOMMENDATION_PROD_URL=${{ secrets.BANK_RECOMMENDATION_PROD_URL }}

            # Service recommendation API URLs
            SERVICE_BASE_URL_DEV=${{ secrets.SERVICE_BASE_URL_DEV }}
            SERVICE_BASE_URL_PROD=${{ secrets.SERVICE_BASE_URL_PROD }}

            # Frontend URLs
            FRONTEND_DEV_URL=${{ secrets.FRONTEND_DEV_URL }}
            FRONTEND_PROD_URL=${{ secrets.FRONTEND_PROD_URL }}

            # Stock wishlist API URLs
            WISHLIST_URL_DEV=${{ secrets.WISHLIST_URL_DEV }}
            WISHLIST_URL_PROD=${{ secrets.WISHLIST_URL_PROD }}

            # Nebius API configuration
            NEBIUS_API_KEY=${{ secrets.NEBIUS_API_KEY }}
            NEBIUS_API_BASE_URL=${{ secrets.NEBIUS_API_BASE_URL }}
            NEBIUS_MODEL_ID=${{ secrets.NEBIUS_MODEL_ID }}

            PORT=3000
            EOL

            # Install Docker if not already installed
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt-get update
              sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
              echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io
              sudo systemctl enable docker
              sudo systemctl start docker
              sudo usermod -aG docker $USER
            fi

            # Install Docker Compose if not already installed
            if ! command -v docker-compose &> /dev/null; then
              echo "Installing Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            # Login to Docker Hub
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

            # Pull the latest image
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/fincrack-backend:latest

            # Create or update Docker Compose file
            cat > docker-compose.yml << EOL
            version: '3'

            services:
              fincrack-backend:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/fincrack-backend:latest
                ports:
                  - "3000:3000"
                env_file:
                  - .env
                restart: always
            EOL

            # Restart services with new configuration
            docker-compose down || true
            docker-compose up -d

            # Clean up old images
            docker image prune -f

            echo "Deployment to EC2 completed at $(date)"
